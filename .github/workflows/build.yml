name: build

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      back-end-directory: hl7-igamt
      front-end-directory: hl7-igamt/igamt-hl7-client-v2
      auth-project-directory: hl7-auth
    strategy:
      matrix:
        node-version: [10.x]

    steps:
      - name: Checkout IGAMT
        uses: actions/checkout@v2
        with:
          path: hl7-igamt

      - name: Checkout AUTH
        uses: actions/checkout@v2
        with:
          repository: usnistgov/hl7-auth
          path: hl7-auth

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
            
      - name: Setup Node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Setup JDK
        uses: actions/setup-java@v1
        with:
          java-version: '9.0.4'
          java-package: jdk
          architecture: x64
          
      - name: Install Dependencies
        working-directory: ${{env.front-end-directory}}
        run: npm install
      
      - name: Lint Front-End
        working-directory: ${{env.front-end-directory}}
        run: npm run lint
          
      - name: Build Prod Front-End
        working-directory: ${{env.front-end-directory}}
        run: npm run ng-high-memory -- build --prod
      
      - name: Build Auth
        working-directory: ${{env.auth-project-directory}}
        run: mvn clean install
      
      - name: Build IGAMT
        working-directory: ${{env.back-end-directory}}
        run: mvn clean package -Dmaven.test.skip=true -q
      
      - name: Decrypt Secrets
        working-directory: ${{env.back-end-directory}}
        env:
          PK_ENCRYPTION_KEY: ${{ secrets.PK_ENCRYPTION_KEY }}
        run: gpg --quiet --batch --yes --decrypt --passphrase="$PK_ENCRYPTION_KEY" \
             --output unencryped_public_key.txt public_key.txt.gpg
      
      - name: Build Docker Image
        working-directory: ${{env.back-end-directory}}
        run: docker build . -t hossamt/igamt-build:1.0.0
        
      - name: Docker Login
        env:
          DOCKER_USER: ${{ secrets.DOCKER_LOGIN }}   
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASS }}  
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
          
      - name: Publish Image to DockerHub
        working-directory: ${{env.back-end-directory}}
        run: docker push hossamt/igamt-build:1.0.0
        
        
